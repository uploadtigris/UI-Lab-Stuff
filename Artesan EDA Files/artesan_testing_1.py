# -*- coding: utf-8 -*-
"""Artesan Testing 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fkGbMcK5mahH-Bw39dXw1CYtTG68pfvz

Birth Rate v. CPI Correlation (50 row set)
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Load the CSV data into a pandas DataFrame
data = pd.read_csv('Worl-Data-50row.csv')

# Specify the names of the two columns you want to calculate the correlation for
column1_name = 'Birth Rate'
column2_name = 'CPI'

# Calculate the correlation coefficient
correlation_coefficient = data[column1_name].corr(data[column2_name])

# Calculate the covariance between Birth Rate and CPI
covariance = data[column1_name].cov(data[column2_name])

# Calculate the standard deviation of Birth Rate and CPI
std_dev_birth_rate = data[column1_name].std()
std_dev_cpi = data[column2_name].std()

# Create a scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(data[column1_name], data[column2_name], color='blue', label=column2_name)
plt.xlabel(column1_name)
plt.ylabel(column2_name)
plt.title(f'Scatter Plot of {column1_name} vs {column2_name}')
plt.legend()

# Display the correlation coefficient, covariance, and standard deviations on the plot, in bold format
plt.text(0.5, 0.9, f'Correlation: {correlation_coefficient:.2f}', ha='center', va='center', transform=plt.gca().transAxes, fontweight='bold')
plt.text(0.5, 0.85, f'Covariance: {covariance:.2f}', ha='center', va='center', transform=plt.gca().transAxes, fontweight='bold')
plt.text(0.5, 0.8, f'Standard Deviation of {column1_name}: {std_dev_birth_rate:.2f}', ha='center', va='center', transform=plt.gca().transAxes, fontweight='bold')
plt.text(0.5, 0.75, f'Standard Deviation of {column2_name}: {std_dev_cpi:.2f}', ha='center', va='center', transform=plt.gca().transAxes, fontweight='bold')

# Show the plot
plt.show()

"""Life Expectancy v. Minimum Wage (50 row set)"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the CSV data into a pandas DataFrame
data = pd.read_csv('Worl-Data-50row.csv')

# Specify the names of the two columns you want to calculate the correlation for
column1_name = 'Life expectancy'
column2_name = 'Minimum wage'

# Remove the dollar sign from data in column2_name and convert to floats
data[column2_name] = data[column2_name].str.replace('$', '').astype(float)

# Calculate the correlation coefficient
correlation_coefficient = data[column1_name].corr(data[column2_name])

# Calculate the covariance between Life Expectancy and Minimum Wage
covariance = data[column1_name].cov(data[column2_name])

# Calculate the standard deviation of Life Expectancy and Minimum Wage
std_dev_life_expectancy = data[column1_name].std()
std_dev_minimum_wage = data[column2_name].std()

# Create a scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(data[column1_name], data[column2_name], color='blue', label=column2_name)
plt.xlabel(column1_name)
plt.ylabel(column2_name)
plt.title(f'Scatter Plot of {column1_name} vs {column2_name}')
plt.legend()

# Display the correlation coefficient, covariance, and standard deviations on the plot, in bold format
plt.text(0.5, 0.9, f'Correlation: {correlation_coefficient:.2f}', ha='center', va='center', transform=plt.gca().transAxes, fontweight='bold')
plt.text(0.5, 0.85, f'Covariance: {covariance:.2f}', ha='center', va='center', transform=plt.gca().transAxes, fontweight='bold')
plt.text(0.5, 0.8, f'Standard Deviation of {column1_name}: {std_dev_life_expectancy:.2f}', ha='center', va='center', transform=plt.gca().transAxes, fontweight='bold')
plt.text(0.5, 0.75, f'Standard Deviation of {column2_name}: {std_dev_minimum_wage:.2f}', ha='center', va='center', transform=plt.gca().transAxes, fontweight='bold')

# Show the plot
plt.show()

"""Physicians per thousands v. Life Expectancy (50 row set)"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the CSV data into a pandas DataFrame
data = pd.read_csv('Worl-Data-50row.csv')

# Specify the names of the two columns you want to calculate the correlation for
column1_name = 'Physicians per thousand'
column2_name = 'Life expectancy'

# Calculate the correlation coefficient
correlation_coefficient = data[column2_name].corr(data[column1_name])  # Switched column1_name and column2_name

# Calculate the covariance between Life Expectancy and Physicians per thousand
covariance = data[column2_name].cov(data[column1_name])  # Switched column1_name and column2_name

# Calculate the standard deviation of Life Expectancy and Physicians per thousand
std_dev_life_expectancy = data[column2_name].std()  # Switched column1_name and column2_name
std_dev_physicians = data[column1_name].std()  # Switched column1_name and column2_name

# Create a scatter plot with switched x and y axes
plt.figure(figsize=(8, 6))
plt.scatter(data[column2_name], data[column1_name], color='blue', label=column1_name)  # Switched column1_name and column2_name
plt.xlabel(column2_name)  # Switched column1_name and column2_name
plt.ylabel(column1_name)  # Switched column1_name and column2_name
plt.title(f'Scatter Plot of {column2_name} vs {column1_name}')  # Switched column1_name and column2_name
plt.legend()

# Display the correlation coefficient, covariance, and standard deviations on the plot, in bold format
plt.text(0.5, 0.9, f'Correlation: {correlation_coefficient:.2f}', ha='center', va='center', transform=plt.gca().transAxes, fontweight='bold')
plt.text(0.5, 0.85, f'Covariance: {covariance:.2f}', ha='center', va='center', transform=plt.gca().transAxes, fontweight='bold')
plt.text(0.5, 0.8, f'Standard Deviation of {column2_name}: {std_dev_life_expectancy:.2f}', ha='center', va='center', transform=plt.gca().transAxes, fontweight='bold')
plt.text(0.5, 0.75, f'Standard Deviation of {column1_name}: {std_dev_physicians:.2f}', ha='center', va='center', transform=plt.gca().transAxes, fontweight='bold')

# Show the plot
plt.show()